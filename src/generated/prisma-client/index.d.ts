// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  access: (where?: AccessWhereInput) => Promise<boolean>;
  board: (where?: BoardWhereInput) => Promise<boolean>;
  card: (where?: CardWhereInput) => Promise<boolean>;
  column: (where?: ColumnWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  access: (where: AccessWhereUniqueInput) => AccessNullablePromise;
  accesses: (args?: {
    where?: AccessWhereInput;
    orderBy?: AccessOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Access>;
  accessesConnection: (args?: {
    where?: AccessWhereInput;
    orderBy?: AccessOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccessConnectionPromise;
  board: (where: BoardWhereUniqueInput) => BoardNullablePromise;
  boards: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Board>;
  boardsConnection: (args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BoardConnectionPromise;
  card: (where: CardWhereUniqueInput) => CardNullablePromise;
  cards: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Card>;
  cardsConnection: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardConnectionPromise;
  column: (where: ColumnWhereUniqueInput) => ColumnNullablePromise;
  columns: (args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Column>;
  columnsConnection: (args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ColumnConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccess: (data: AccessCreateInput) => AccessPromise;
  updateAccess: (args: {
    data: AccessUpdateInput;
    where: AccessWhereUniqueInput;
  }) => AccessPromise;
  updateManyAccesses: (args: {
    data: AccessUpdateManyMutationInput;
    where?: AccessWhereInput;
  }) => BatchPayloadPromise;
  upsertAccess: (args: {
    where: AccessWhereUniqueInput;
    create: AccessCreateInput;
    update: AccessUpdateInput;
  }) => AccessPromise;
  deleteAccess: (where: AccessWhereUniqueInput) => AccessPromise;
  deleteManyAccesses: (where?: AccessWhereInput) => BatchPayloadPromise;
  createBoard: (data: BoardCreateInput) => BoardPromise;
  updateBoard: (args: {
    data: BoardUpdateInput;
    where: BoardWhereUniqueInput;
  }) => BoardPromise;
  updateManyBoards: (args: {
    data: BoardUpdateManyMutationInput;
    where?: BoardWhereInput;
  }) => BatchPayloadPromise;
  upsertBoard: (args: {
    where: BoardWhereUniqueInput;
    create: BoardCreateInput;
    update: BoardUpdateInput;
  }) => BoardPromise;
  deleteBoard: (where: BoardWhereUniqueInput) => BoardPromise;
  deleteManyBoards: (where?: BoardWhereInput) => BatchPayloadPromise;
  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (args: {
    data: CardUpdateInput;
    where: CardWhereUniqueInput;
  }) => CardPromise;
  updateManyCards: (args: {
    data: CardUpdateManyMutationInput;
    where?: CardWhereInput;
  }) => BatchPayloadPromise;
  upsertCard: (args: {
    where: CardWhereUniqueInput;
    create: CardCreateInput;
    update: CardUpdateInput;
  }) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createColumn: (data: ColumnCreateInput) => ColumnPromise;
  updateColumn: (args: {
    data: ColumnUpdateInput;
    where: ColumnWhereUniqueInput;
  }) => ColumnPromise;
  updateManyColumns: (args: {
    data: ColumnUpdateManyMutationInput;
    where?: ColumnWhereInput;
  }) => BatchPayloadPromise;
  upsertColumn: (args: {
    where: ColumnWhereUniqueInput;
    create: ColumnCreateInput;
    update: ColumnUpdateInput;
  }) => ColumnPromise;
  deleteColumn: (where: ColumnWhereUniqueInput) => ColumnPromise;
  deleteManyColumns: (where?: ColumnWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  access: (
    where?: AccessSubscriptionWhereInput
  ) => AccessSubscriptionPayloadSubscription;
  board: (
    where?: BoardSubscriptionWhereInput
  ) => BoardSubscriptionPayloadSubscription;
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  column: (
    where?: ColumnSubscriptionWhereInput
  ) => ColumnSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Priority = "Critical" | "High" | "Medium" | "Low";

export type Type = "Task" | "Bug" | "Improvement";

export type BoardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ColumnOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "settings_ASC"
  | "settings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "priority_ASC"
  | "priority_DESC"
  | "type_ASC"
  | "type_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AccessOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "permissions_ASC"
  | "permissions_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "username_ASC"
  | "username_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "avatar_ASC"
  | "avatar_DESC"
  | "settings_ASC"
  | "settings_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface BoardUpdateWithWhereUniqueWithoutProjectInput {
  where: BoardWhereUniqueInput;
  data: BoardUpdateWithoutProjectDataInput;
}

export type AccessWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CardUpdateWithWhereUniqueWithoutColumnInput {
  where: CardWhereUniqueInput;
  data: CardUpdateWithoutColumnDataInput;
}

export interface ColumnWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  board?: Maybe<BoardWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  cards_every?: Maybe<CardWhereInput>;
  cards_some?: Maybe<CardWhereInput>;
  cards_none?: Maybe<CardWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ColumnWhereInput[] | ColumnWhereInput>;
  OR?: Maybe<ColumnWhereInput[] | ColumnWhereInput>;
  NOT?: Maybe<ColumnWhereInput[] | ColumnWhereInput>;
}

export interface CardUpdateWithoutColumnDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  priority?: Maybe<Priority>;
  type?: Maybe<Type>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  avatar?: Maybe<String>;
  avatar_not?: Maybe<String>;
  avatar_in?: Maybe<String[] | String>;
  avatar_not_in?: Maybe<String[] | String>;
  avatar_lt?: Maybe<String>;
  avatar_lte?: Maybe<String>;
  avatar_gt?: Maybe<String>;
  avatar_gte?: Maybe<String>;
  avatar_contains?: Maybe<String>;
  avatar_not_contains?: Maybe<String>;
  avatar_starts_with?: Maybe<String>;
  avatar_not_starts_with?: Maybe<String>;
  avatar_ends_with?: Maybe<String>;
  avatar_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CardUpsertWithWhereUniqueWithoutColumnInput {
  where: CardWhereUniqueInput;
  update: CardUpdateWithoutColumnDataInput;
  create: CardCreateWithoutColumnInput;
}

export interface BoardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  project?: Maybe<ProjectWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  columns_every?: Maybe<ColumnWhereInput>;
  columns_some?: Maybe<ColumnWhereInput>;
  columns_none?: Maybe<ColumnWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  OR?: Maybe<BoardWhereInput[] | BoardWhereInput>;
  NOT?: Maybe<BoardWhereInput[] | BoardWhereInput>;
}

export interface BoardCreateManyWithoutProjectInput {
  create?: Maybe<
    BoardCreateWithoutProjectInput[] | BoardCreateWithoutProjectInput
  >;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
}

export interface ProjectCreateWithoutBoardsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  user: UserCreateOneInput;
}

export interface BoardCreateWithoutProjectInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  columns?: Maybe<ColumnCreateManyWithoutBoardInput>;
}

export interface CardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  priority?: Maybe<Priority>;
  priority_not?: Maybe<Priority>;
  priority_in?: Maybe<Priority[] | Priority>;
  priority_not_in?: Maybe<Priority[] | Priority>;
  type?: Maybe<Type>;
  type_not?: Maybe<Type>;
  type_in?: Maybe<Type[] | Type>;
  type_not_in?: Maybe<Type[] | Type>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  OR?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  NOT?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
}

export interface ColumnCreateManyWithoutBoardInput {
  create?: Maybe<
    ColumnCreateWithoutBoardInput[] | ColumnCreateWithoutBoardInput
  >;
  connect?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ColumnCreateWithoutBoardInput {
  id?: Maybe<ID_Input>;
  name: String;
  settings?: Maybe<Json>;
  cards?: Maybe<CardCreateManyWithoutColumnInput>;
}

export interface AccessWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  project?: Maybe<ProjectWhereInput>;
  user?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AccessWhereInput[] | AccessWhereInput>;
  OR?: Maybe<AccessWhereInput[] | AccessWhereInput>;
  NOT?: Maybe<AccessWhereInput[] | AccessWhereInput>;
}

export interface CardCreateManyWithoutColumnInput {
  create?: Maybe<CardCreateWithoutColumnInput[] | CardCreateWithoutColumnInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
}

export interface BoardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BoardWhereInput>;
  AND?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  OR?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
  NOT?: Maybe<BoardSubscriptionWhereInput[] | BoardSubscriptionWhereInput>;
}

export interface CardCreateWithoutColumnInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  priority: Priority;
  type: Type;
  name: String;
  description?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  avatar?: Maybe<String>;
  settings?: Maybe<Json>;
}

export interface AccessUpdateInput {
  project?: Maybe<ProjectUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  permissions?: Maybe<Json>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ProjectUpdateOneRequiredInput {
  create?: Maybe<ProjectCreateInput>;
  update?: Maybe<ProjectUpdateDataInput>;
  upsert?: Maybe<ProjectUpsertNestedInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  boards?: Maybe<BoardUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  boards?: Maybe<BoardUpdateManyWithoutProjectInput>;
}

export interface ColumnUpdateInput {
  board?: Maybe<BoardUpdateOneRequiredWithoutColumnsInput>;
  name?: Maybe<String>;
  settings?: Maybe<Json>;
  cards?: Maybe<CardUpdateManyWithoutColumnInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ColumnCreateInput {
  id?: Maybe<ID_Input>;
  board: BoardCreateOneWithoutColumnsInput;
  name: String;
  settings?: Maybe<Json>;
  cards?: Maybe<CardCreateManyWithoutColumnInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  avatar?: Maybe<String>;
  settings?: Maybe<Json>;
}

export interface ColumnUpsertWithoutCardsInput {
  update: ColumnUpdateWithoutCardsDataInput;
  create: ColumnCreateWithoutCardsInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface BoardUpsertWithoutColumnsInput {
  update: BoardUpdateWithoutColumnsDataInput;
  create: BoardCreateWithoutColumnsInput;
}

export interface BoardUpdateManyWithoutProjectInput {
  create?: Maybe<
    BoardCreateWithoutProjectInput[] | BoardCreateWithoutProjectInput
  >;
  delete?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  connect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  set?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  disconnect?: Maybe<BoardWhereUniqueInput[] | BoardWhereUniqueInput>;
  update?: Maybe<
    | BoardUpdateWithWhereUniqueWithoutProjectInput[]
    | BoardUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | BoardUpsertWithWhereUniqueWithoutProjectInput[]
    | BoardUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  updateMany?: Maybe<
    BoardUpdateManyWithWhereNestedInput[] | BoardUpdateManyWithWhereNestedInput
  >;
}

export interface BoardUpdateOneRequiredWithoutColumnsInput {
  create?: Maybe<BoardCreateWithoutColumnsInput>;
  update?: Maybe<BoardUpdateWithoutColumnsDataInput>;
  upsert?: Maybe<BoardUpsertWithoutColumnsInput>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface BoardUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ColumnUpdateWithoutCardsDataInput {
  board?: Maybe<BoardUpdateOneRequiredWithoutColumnsInput>;
  name?: Maybe<String>;
  settings?: Maybe<Json>;
}

export interface BoardUpdateWithoutProjectDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  columns?: Maybe<ColumnUpdateManyWithoutBoardInput>;
}

export interface CardUpdateInput {
  column?: Maybe<ColumnUpdateOneRequiredWithoutCardsInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  priority?: Maybe<Priority>;
  type?: Maybe<Type>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ColumnUpdateManyWithoutBoardInput {
  create?: Maybe<
    ColumnCreateWithoutBoardInput[] | ColumnCreateWithoutBoardInput
  >;
  delete?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  connect?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  set?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  disconnect?: Maybe<ColumnWhereUniqueInput[] | ColumnWhereUniqueInput>;
  update?: Maybe<
    | ColumnUpdateWithWhereUniqueWithoutBoardInput[]
    | ColumnUpdateWithWhereUniqueWithoutBoardInput
  >;
  upsert?: Maybe<
    | ColumnUpsertWithWhereUniqueWithoutBoardInput[]
    | ColumnUpsertWithWhereUniqueWithoutBoardInput
  >;
  deleteMany?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
  updateMany?: Maybe<
    | ColumnUpdateManyWithWhereNestedInput[]
    | ColumnUpdateManyWithWhereNestedInput
  >;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ColumnUpdateWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput;
  data: ColumnUpdateWithoutBoardDataInput;
}

export interface ColumnCreateWithoutCardsInput {
  id?: Maybe<ID_Input>;
  board: BoardCreateOneWithoutColumnsInput;
  name: String;
  settings?: Maybe<Json>;
}

export interface ColumnUpdateWithoutBoardDataInput {
  name?: Maybe<String>;
  settings?: Maybe<Json>;
  cards?: Maybe<CardUpdateManyWithoutColumnInput>;
}

export interface CardCreateInput {
  id?: Maybe<ID_Input>;
  column: ColumnCreateOneWithoutCardsInput;
  user: UserCreateOneInput;
  priority: Priority;
  type: Type;
  name: String;
  description?: Maybe<String>;
}

export interface CardUpdateManyWithoutColumnInput {
  create?: Maybe<CardCreateWithoutColumnInput[] | CardCreateWithoutColumnInput>;
  delete?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  connect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  set?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  disconnect?: Maybe<CardWhereUniqueInput[] | CardWhereUniqueInput>;
  update?: Maybe<
    | CardUpdateWithWhereUniqueWithoutColumnInput[]
    | CardUpdateWithWhereUniqueWithoutColumnInput
  >;
  upsert?: Maybe<
    | CardUpsertWithWhereUniqueWithoutColumnInput[]
    | CardUpsertWithWhereUniqueWithoutColumnInput
  >;
  deleteMany?: Maybe<CardScalarWhereInput[] | CardScalarWhereInput>;
  updateMany?: Maybe<
    CardUpdateManyWithWhereNestedInput[] | CardUpdateManyWithWhereNestedInput
  >;
}

export interface AccessCreateInput {
  id?: Maybe<ID_Input>;
  project: ProjectCreateOneInput;
  user: UserCreateOneInput;
  permissions?: Maybe<Json>;
}

export interface CardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  column?: Maybe<ColumnWhereInput>;
  user?: Maybe<UserWhereInput>;
  priority?: Maybe<Priority>;
  priority_not?: Maybe<Priority>;
  priority_in?: Maybe<Priority[] | Priority>;
  priority_not_in?: Maybe<Priority[] | Priority>;
  type?: Maybe<Type>;
  type_not?: Maybe<Type>;
  type_in?: Maybe<Type[] | Type>;
  type_not_in?: Maybe<Type[] | Type>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CardWhereInput[] | CardWhereInput>;
  OR?: Maybe<CardWhereInput[] | CardWhereInput>;
  NOT?: Maybe<CardWhereInput[] | CardWhereInput>;
}

export interface ProjectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  user: UserCreateOneInput;
  boards?: Maybe<BoardCreateManyWithoutProjectInput>;
}

export interface ProjectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  boards_every?: Maybe<BoardWhereInput>;
  boards_some?: Maybe<BoardWhereInput>;
  boards_none?: Maybe<BoardWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  username?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  avatar?: Maybe<String>;
  settings?: Maybe<Json>;
}

export interface ProjectUpsertWithoutBoardsInput {
  update: ProjectUpdateWithoutBoardsDataInput;
  create: ProjectCreateWithoutBoardsInput;
}

export interface ColumnSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ColumnWhereInput>;
  AND?: Maybe<ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput>;
  OR?: Maybe<ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput>;
  NOT?: Maybe<ColumnSubscriptionWhereInput[] | ColumnSubscriptionWhereInput>;
}

export interface ProjectUpdateWithoutBoardsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredInput>;
}

export interface AccessSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccessWhereInput>;
  AND?: Maybe<AccessSubscriptionWhereInput[] | AccessSubscriptionWhereInput>;
  OR?: Maybe<AccessSubscriptionWhereInput[] | AccessSubscriptionWhereInput>;
  NOT?: Maybe<AccessSubscriptionWhereInput[] | AccessSubscriptionWhereInput>;
}

export interface CardUpdateManyWithWhereNestedInput {
  where: CardScalarWhereInput;
  data: CardUpdateManyDataInput;
}

export type BoardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CardUpdateManyDataInput {
  priority?: Maybe<Priority>;
  type?: Maybe<Type>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export type CardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ColumnUpsertWithWhereUniqueWithoutBoardInput {
  where: ColumnWhereUniqueInput;
  update: ColumnUpdateWithoutBoardDataInput;
  create: ColumnCreateWithoutBoardInput;
}

export type ColumnWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ColumnScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
  OR?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
  NOT?: Maybe<ColumnScalarWhereInput[] | ColumnScalarWhereInput>;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ColumnUpdateManyWithWhereNestedInput {
  where: ColumnScalarWhereInput;
  data: ColumnUpdateManyDataInput;
}

export interface BoardCreateWithoutColumnsInput {
  id?: Maybe<ID_Input>;
  project?: Maybe<ProjectCreateOneWithoutBoardsInput>;
  name: String;
  description?: Maybe<String>;
}

export interface ColumnUpdateManyDataInput {
  name?: Maybe<String>;
  settings?: Maybe<Json>;
}

export interface ColumnCreateOneWithoutCardsInput {
  create?: Maybe<ColumnCreateWithoutCardsInput>;
  connect?: Maybe<ColumnWhereUniqueInput>;
}

export interface BoardUpsertWithWhereUniqueWithoutProjectInput {
  where: BoardWhereUniqueInput;
  update: BoardUpdateWithoutProjectDataInput;
  create: BoardCreateWithoutProjectInput;
}

export interface ProjectCreateOneInput {
  create?: Maybe<ProjectCreateInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface BoardScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  OR?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
  NOT?: Maybe<BoardScalarWhereInput[] | BoardScalarWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface BoardUpdateManyWithWhereNestedInput {
  where: BoardScalarWhereInput;
  data: BoardUpdateManyDataInput;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  username?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  avatar?: Maybe<String>;
  settings?: Maybe<Json>;
}

export interface BoardUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CardUpdateManyMutationInput {
  priority?: Maybe<Priority>;
  type?: Maybe<Type>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput;
  create: ProjectCreateInput;
}

export interface ColumnUpdateOneRequiredWithoutCardsInput {
  create?: Maybe<ColumnCreateWithoutCardsInput>;
  update?: Maybe<ColumnUpdateWithoutCardsDataInput>;
  upsert?: Maybe<ColumnUpsertWithoutCardsInput>;
  connect?: Maybe<ColumnWhereUniqueInput>;
}

export interface AccessUpdateManyMutationInput {
  permissions?: Maybe<Json>;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardWhereInput>;
  AND?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  OR?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  NOT?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
}

export interface ProjectCreateOneWithoutBoardsInput {
  create?: Maybe<ProjectCreateWithoutBoardsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface BoardCreateInput {
  id?: Maybe<ID_Input>;
  project?: Maybe<ProjectCreateOneWithoutBoardsInput>;
  name: String;
  description?: Maybe<String>;
  columns?: Maybe<ColumnCreateManyWithoutBoardInput>;
}

export interface BoardUpdateInput {
  project?: Maybe<ProjectUpdateOneWithoutBoardsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  columns?: Maybe<ColumnUpdateManyWithoutBoardInput>;
}

export interface ProjectUpdateOneWithoutBoardsInput {
  create?: Maybe<ProjectCreateWithoutBoardsInput>;
  update?: Maybe<ProjectUpdateWithoutBoardsDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutBoardsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ColumnUpdateManyMutationInput {
  name?: Maybe<String>;
  settings?: Maybe<Json>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BoardCreateOneWithoutColumnsInput {
  create?: Maybe<BoardCreateWithoutColumnsInput>;
  connect?: Maybe<BoardWhereUniqueInput>;
}

export interface BoardUpdateWithoutColumnsDataInput {
  project?: Maybe<ProjectUpdateOneWithoutBoardsInput>;
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  username?: String;
  firstName?: String;
  lastName?: String;
  avatar?: String;
  settings?: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  avatar: () => Promise<String>;
  settings: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  settings: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateAccess {
  count: Int;
}

export interface AggregateAccessPromise
  extends Promise<AggregateAccess>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccessSubscription
  extends Promise<AsyncIterator<AggregateAccess>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Board {
  id: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BoardPromise extends Promise<Board>, Fragmentable {
  id: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  columns: <T = FragmentableArray<Column>>(args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardSubscription
  extends Promise<AsyncIterator<Board>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  project: <T = ProjectSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  columns: <T = Promise<AsyncIterator<ColumnSubscription>>>(args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BoardNullablePromise
  extends Promise<Board | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  name: () => Promise<String>;
  description: () => Promise<String>;
  columns: <T = FragmentableArray<Column>>(args?: {
    where?: ColumnWhereInput;
    orderBy?: ColumnOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardEdge {
  node: Board;
  cursor: String;
}

export interface BoardEdgePromise extends Promise<BoardEdge>, Fragmentable {
  node: <T = BoardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BoardEdgeSubscription
  extends Promise<AsyncIterator<BoardEdge>>,
    Fragmentable {
  node: <T = BoardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ColumnPreviousValues {
  id: ID_Output;
  name: String;
  settings?: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ColumnPreviousValuesPromise
  extends Promise<ColumnPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  settings: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ColumnPreviousValuesSubscription
  extends Promise<AsyncIterator<ColumnPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  settings: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BoardConnection {
  pageInfo: PageInfo;
  edges: BoardEdge[];
}

export interface BoardConnectionPromise
  extends Promise<BoardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BoardEdge>>() => T;
  aggregate: <T = AggregateBoardPromise>() => T;
}

export interface BoardConnectionSubscription
  extends Promise<AsyncIterator<BoardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BoardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBoardSubscription>() => T;
}

export interface AccessEdge {
  node: Access;
  cursor: String;
}

export interface AccessEdgePromise extends Promise<AccessEdge>, Fragmentable {
  node: <T = AccessPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccessEdgeSubscription
  extends Promise<AsyncIterator<AccessEdge>>,
    Fragmentable {
  node: <T = AccessSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface Access {
  id: ID_Output;
  permissions?: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AccessPromise extends Promise<Access>, Fragmentable {
  id: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  user: <T = UserPromise>() => T;
  permissions: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AccessSubscription
  extends Promise<AsyncIterator<Access>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  project: <T = ProjectSubscription>() => T;
  user: <T = UserSubscription>() => T;
  permissions: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AccessNullablePromise
  extends Promise<Access | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  project: <T = ProjectPromise>() => T;
  user: <T = UserPromise>() => T;
  permissions: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AggregateColumn {
  count: Int;
}

export interface AggregateColumnPromise
  extends Promise<AggregateColumn>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateColumnSubscription
  extends Promise<AsyncIterator<AggregateColumn>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AccessSubscriptionPayload {
  mutation: MutationType;
  node: Access;
  updatedFields: String[];
  previousValues: AccessPreviousValues;
}

export interface AccessSubscriptionPayloadPromise
  extends Promise<AccessSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccessPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccessPreviousValuesPromise>() => T;
}

export interface AccessSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccessSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccessSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccessPreviousValuesSubscription>() => T;
}

export interface ColumnConnection {
  pageInfo: PageInfo;
  edges: ColumnEdge[];
}

export interface ColumnConnectionPromise
  extends Promise<ColumnConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ColumnEdge>>() => T;
  aggregate: <T = AggregateColumnPromise>() => T;
}

export interface ColumnConnectionSubscription
  extends Promise<AsyncIterator<ColumnConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ColumnEdgeSubscription>>>() => T;
  aggregate: <T = AggregateColumnSubscription>() => T;
}

export interface AccessPreviousValues {
  id: ID_Output;
  permissions?: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AccessPreviousValuesPromise
  extends Promise<AccessPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  permissions: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AccessPreviousValuesSubscription
  extends Promise<AsyncIterator<AccessPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  permissions: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AccessConnection {
  pageInfo: PageInfo;
  edges: AccessEdge[];
}

export interface AccessConnectionPromise
  extends Promise<AccessConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccessEdge>>() => T;
  aggregate: <T = AggregateAccessPromise>() => T;
}

export interface AccessConnectionSubscription
  extends Promise<AsyncIterator<AccessConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccessEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccessSubscription>() => T;
}

export interface AggregateBoard {
  count: Int;
}

export interface AggregateBoardPromise
  extends Promise<AggregateBoard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBoardSubscription
  extends Promise<AsyncIterator<AggregateBoard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BoardSubscriptionPayload {
  mutation: MutationType;
  node: Board;
  updatedFields: String[];
  previousValues: BoardPreviousValues;
}

export interface BoardSubscriptionPayloadPromise
  extends Promise<BoardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BoardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BoardPreviousValuesPromise>() => T;
}

export interface BoardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BoardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BoardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BoardPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BoardPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface BoardPreviousValuesPromise
  extends Promise<BoardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface BoardPreviousValuesSubscription
  extends Promise<AsyncIterator<BoardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  username?: String;
  firstName?: String;
  lastName?: String;
  avatar?: String;
  settings?: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  avatar: () => Promise<String>;
  settings: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  avatar: () => Promise<AsyncIterator<String>>;
  settings: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  avatar: () => Promise<String>;
  settings: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ColumnEdge {
  node: Column;
  cursor: String;
}

export interface ColumnEdgePromise extends Promise<ColumnEdge>, Fragmentable {
  node: <T = ColumnPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ColumnEdgeSubscription
  extends Promise<AsyncIterator<ColumnEdge>>,
    Fragmentable {
  node: <T = ColumnSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface ColumnSubscriptionPayload {
  mutation: MutationType;
  node: Column;
  updatedFields: String[];
  previousValues: ColumnPreviousValues;
}

export interface ColumnSubscriptionPayloadPromise
  extends Promise<ColumnSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ColumnPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ColumnPreviousValuesPromise>() => T;
}

export interface ColumnSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ColumnSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ColumnSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ColumnPreviousValuesSubscription>() => T;
}

export interface Card {
  id: ID_Output;
  priority: Priority;
  type: Type;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  column: <T = ColumnPromise>() => T;
  user: <T = UserPromise>() => T;
  priority: () => Promise<Priority>;
  type: () => Promise<Type>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  column: <T = ColumnSubscription>() => T;
  user: <T = UserSubscription>() => T;
  priority: () => Promise<AsyncIterator<Priority>>;
  type: () => Promise<AsyncIterator<Type>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CardNullablePromise
  extends Promise<Card | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  column: <T = ColumnPromise>() => T;
  user: <T = UserPromise>() => T;
  priority: () => Promise<Priority>;
  type: () => Promise<Type>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CardPreviousValues {
  id: ID_Output;
  priority: Priority;
  type: Type;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  priority: () => Promise<Priority>;
  type: () => Promise<Type>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  priority: () => Promise<AsyncIterator<Priority>>;
  type: () => Promise<AsyncIterator<Type>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Column {
  id: ID_Output;
  name: String;
  settings?: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ColumnPromise extends Promise<Column>, Fragmentable {
  id: () => Promise<ID_Output>;
  board: <T = BoardPromise>() => T;
  name: () => Promise<String>;
  settings: () => Promise<Json>;
  cards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ColumnSubscription
  extends Promise<AsyncIterator<Column>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  board: <T = BoardSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  settings: () => Promise<AsyncIterator<Json>>;
  cards: <T = Promise<AsyncIterator<CardSubscription>>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ColumnNullablePromise
  extends Promise<Column | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  board: <T = BoardPromise>() => T;
  name: () => Promise<String>;
  settings: () => Promise<Json>;
  cards: <T = FragmentableArray<Card>>(args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Project {
  id: ID_Output;
  name: String;
  description?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  user: <T = UserPromise>() => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  boards: <T = Promise<AsyncIterator<BoardSubscription>>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  user: <T = UserPromise>() => T;
  boards: <T = FragmentableArray<Board>>(args?: {
    where?: BoardWhereInput;
    orderBy?: BoardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Json = any;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  },
  {
    name: "Access",
    embedded: false
  },
  {
    name: "Board",
    embedded: false
  },
  {
    name: "Column",
    embedded: false
  },
  {
    name: "Card",
    embedded: false
  },
  {
    name: "Priority",
    embedded: false
  },
  {
    name: "Type",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
